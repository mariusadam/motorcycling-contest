syntax = "proto3";

option java_multiple_files = true;
option java_package = "com.ubb.mpp.motocontest.generated";
option csharp_namespace = "Generated";
option java_outer_classname = "MotoContestProto";

package motocontest;

// The motorcycling contest service definition.
service MotoContest {
    // Sends a greeting
    rpc SayHello (HelloRequest) returns (HelloReply) {
    }
    // Sends another greeting
    rpc SayHelloAgain (HelloRequest) returns (HelloReply) {
    }

    // send subscribe requests
    rpc Subscribe (SubscribeRequest) returns (stream Event) {
    }

    rpc Login (LoginRequest) returns (LoginReply) {
    }

    rpc GetContestants (GetContestantsRequest) returns (GetContestantsReply) {
    }

    rpc Search (SearchContestantsRequest) returns (SearchContestantsReply) {
    }

    rpc GetRaces (Empty) returns (GetRacesReply) {
    }

    rpc RegisterContestant (RegisterContestantRequest) returns (SimpleReply) {
    }

    rpc GetTeams (Empty) returns (GetTeamsReply) {
    }

    rpc GetEngineCapacities (Empty) returns (GetEngineCapacitiesReply) {
    }

    rpc AddTeam (AddTeamRequest) returns (SimpleReply) {
    }

    rpc GetRacesParticipants (Empty) returns (stream RaceParticipants) {
    }
}

message RaceParticipants {
    RaceDto race = 1;
    int32 numberOfParticipants = 2;
}

message AddTeamRequest {
    string teamName = 1;
}

message GetTeamsReply {
    string message = 1;
    Status status = 2;
    repeated TeamDto team = 3;
}

message GetEngineCapacitiesReply {
    string message = 1;
    Status status = 2;
    repeated EngineCapacityDto engineCapacity = 3;
}

message RegisterContestantRequest {
    string contestantName = 1;
    TeamDto team = 2;
    EngineCapacityDto engineCapacity = 3;
    repeated RaceDto race = 4;
}

message SimpleReply {
    string message = 1;
    Status status = 2;
}

message GetRacesReply {
    string message = 1;
    Status status = 2;
    repeated RaceDto race = 3;
}

message Empty {

}

message LoginRequest {
    string email = 1;
    string password = 2;
}

message LoginReply {
    string message = 1;
    Status status = 2;
}

enum Status {
    OK = 0;
    UNAUTHORIZED = 1;
    ERROR = 3;
}

message GetContestantsRequest {

}

message GetContestantsReply {
    string message = 1;
    Status status = 2;
    repeated ContestantDto contestant = 3;
}

message SearchContestantsRequest {
    string teamName = 1;
}

message SearchContestantsReply {
    string message = 1;
    Status status = 2;
    repeated ContestantDto contestant = 3;
}

// The request message containing the user's name.
message HelloRequest {
    string name = 1;
}

// The response message containing the greetings
message HelloReply {
    string message = 1;
}

message SubscribeRequest {
    repeated Event.Name eventName = 1;
}


message Event {
    enum Name {
        CONTESTANT_REGISTERED = 0;
        HELLO = 1;
        HELLO_AGAIN = 2;
        TEAM_ADDED = 3;
    }

    Name name = 1;
}

message UserDto {
    int32 id = 1;
    string firstName = 2;
    string lastName = 3;
    string email = 4;
}

message TeamDto {
    int32 id = 1;
    string name = 2;
}

message ContestantDto {
    int32 id = 1;
    string name = 2;
    TeamDto team = 3;
    EngineCapacityDto engineCapacity = 4;
}

message EngineCapacityDto {
    int32 id = 1;
    UM um = 2;
    double capacity = 3;

    enum UM {
        MC = 0;
        CC = 1;
    }
}

message RaceDto {
    int32 id = 1;
    string name = 2;
    int64 startTime = 3;
}
